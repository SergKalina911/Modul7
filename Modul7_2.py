"""                                     Функтори, Ітератори та Управління контекстом в Python

                        Функтори, магічний метод __call__

Функтори в Python — це об'єкти класів, які можуть бути викликані як функції. Це досягається за допомогою реалізації 
спеціального магічного методу __call__ для класу. Коли ви додаєте метод __call__ до класу, екземпляри цього класу 
можуть бути викликані звичайні функції.

    ☝ Функтори — це об'єкти, які поводяться як функції у тому сенсі, що їх можна викликати та передавати їм 
    аргументи.

Функтори можуть бути корисними з кількох причин:
- Дозволяють об'єктам мати стан. Це означає, що функтор може зберігати стан між викликами.
- Функтори дозволяють об'єкту мати складну логіку виклику, яка може залежати від внутрішнього стану функтора або 
інших факторів.
- Вони можуть використовуватися для створення параметризованих, налаштовуваних або замкнутих функцій.

Для прикладу реалізуємо метод __call__ класу, роблячи його функтором:"""

class Multiplier:
    def __init__(self, factor):
        self.factor = factor

    def __call__(self, other):
        return self.factor * other

# Створення екземпляра функтора
double = Multiplier(2)
triple = Multiplier(3)

# Виклик функтора
print(double(5))  # Виведе: 10
print(triple(3))  # Виведе: 9

""" Клас, Multiplier приймає один аргумент factor при ініціалізації. Метод __call__ дозволяє екземплярам Multiplier 
викликатися як функції, які множать передане їм значення на фактор, вказаний при створенні екземпляру. Це щось 
схоже на механізм замикання який ми розглядали раніше.

Розглянемо функтор зі станом. Він буде використовувати свій внутрішній стан для підрахунку кількості разів, коли 
його викликали."""

class Counter:
    def __init__(self):
        self.count = 0

    def __call__(self, *args, **kwargs):
        self.count += 1

counter = Counter()
counter()
counter()
print(f"Викликано {counter.count} разів")

# Виведення:
# Викликано 2 разів

""" Функтор може містити в собі досить складну логіку. Розглянемо функтор який використовує внутрішній стан та 
додаткові параметри для вирішення, яку дію виконати при виклику. Цей функтор приймає параметри при ініціалізації, 
які потім використовуються для налаштування його поведінки."""

class SmartCalculator:
    def __init__(self, operation='add'):
        self.operation = operation

    def __call__(self, a, b):
        if self.operation == 'add':
            return a + b
        elif self.operation == 'subtract':
            return a - b
        else:
            raise ValueError("Невідома операція")

add = SmartCalculator('add')
print(add(5, 3))  # 8

subtract = SmartCalculator('subtract')
print(subtract(10, 7))  # 3
"""
В залежності від свого стану функтор виконує операції додавання чи віднімання над числами. Виведення:
8
3

Наш клас SmartCalculator створює замкнуті функції із заданими параметрами. Об'єкт add функтор додавання чисел, а 
subtract - віднімання.

Функтори в Python — потужний інструмент, який дозволяє класам імітувати поведінку функцій і при цьому мати власний 
внутрішній стан та логіку. Вони можуть зробити код більш гнучким, додавши об'єктно-орієнтовані можливості до 
функціонального стилю програмування.
"""