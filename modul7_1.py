"""                                     Вступ

Привіт!

У цьому модулі ми продовжимо вивчати ООП у Python і познайомимось з новими конструкціями, 
характерними для нього.

Розглянемо такі теми:

 -Магічні методи класів, використання __str__ та __repr__ , _getitem__ та __setitem__
- Перевизначення математичних операторів + , - , / , // , % , *
- Перевизначення операторів порівняння <, <=, >, >=, ==, !=
- Управління атрибутами та методами в класах. Гетери та сетери
- Статичні та класові методи і їх використання всередині класів
- Функтори і магічний метод __**call__**
- Створення об'єкта ітератора та генератора
- Методи передачі значень у генератор
-Створення власних менеджерів контексту

В результаті проходження модуля, ти розшириш свій toolkit з обєктно-орієнтованого програмування у Python.


                                        7.1 Використання спеціальних методів для керування об'єктами
                                        
                        Магічні методи класів
                        
Як ми вже обговорювали, в мові програмування Python практично кожен елемент можна розглядати як об'єкт. Ця 
унікальна особливість Python робить його особливо гнучким і потужним інструментом у руках розробників. 
Об'єктно-орієнтоване програмування (ООП) у Python дозволяє модифікувати поведінку об'єктів, змінюючи їх поля 
з даними та/або методи. Це означає, що розробник має можливість не просто створювати дані структури, але й 
керувати їх поведінкою на найнижчому рівні.

Коли ми застосовуємо до об'єкта оператор, такий як + або -, насправді, ми викликаємо специфічний метод цього 
об'єкта. Такі методи визначають, як об'єкт повинен реагувати на використання певного оператора. Це правило 
стосується більшості операторів у Python, роблячи можливим дуже точне та гнучке управління поведінкою об'єктів.

Методи, що відповідають за визначену поведінку об'єктів при використанні операторів або інших синтаксичних 
конструкцій, називаються магічними методами. Хоча вони й отримали таку назву через свою здатність "за лаштунками" 
змінювати стандартну поведінку, насправді немає нічого магічного у тому, як вони працюють.

Магічні методи – це просто засоби, які мова програмування Python надає розробникам для реалізації операторного 
перевантаження та інших потужних механізмів.

Ось чому вираз a + b на низькому рівні трансформується в виклик a.__add__(b), перетворюючи стандартну операцію 
додавання на виклик методу, який може бути перевизначений за бажанням розробника. Така можливість дає велику волю 
у налаштуванні поведінки об'єктів, дозволяючи, наприклад, створювати складні числові типи або реалізовувати 
оператори для роботи з власними класами даних.

Детальний перелік "магічних" методів, їх призначення та приклади застосування можна знайти у спеціалізованих 
джерелах та документації по Python. Наприклад, за цим посиланням (https://minhhh.github.io/posts/a-guide-to-pythons-magic-methods), 
розміщено вичерпний матеріал, що описує ці методи з прикладами їх застосування, що є надзвичайно корисним ресурсом 
для глибшого розуміння та ефективного використання магічних методів у власних проєктах.

У рамках цього уроку ми детальніше розглянемо деякі з найбільш часто використовуваних магічних методів. Це допоможе 
нам зрозуміти, як за їх допомогою можна керувати основними операціями та поведінкою об'єктів у Python.

Важливо пам'ятати, що імена всіх магічних методів в Python дотримуються строгої номенклатури: вони складаються з літер 
нижнього регістру та символів підкреслення, починаючись і закінчуючись подвійним символом підкреслення (__). 
Ця конвенція не тільки сприяє єдності стилю кодування, але й робить магічні методи легко впізнаваними серед іншого коду.

Магічний метод, який ми найчастіше використовуємо, — це метод __init__. Як ми вже знаємо, метод відповідає за ініціалізацію 
об'єкта. Коли ви створюєте об'єкт класу, то спочатку створюється порожній об'єкт, який містить лише обов'язкові службові 
атрибути. Після того як об'єкт створено, автоматично викликається метод __init__, який ми можемо модифікувати під наші потреби."""

class Human:
    def __init__(self, name: str, age: int = 0):
        self.name = name
        self.age = age

    def say_hello(self) -> str:
        return f'Hello! I am {self.name}'

bill = Human('Bill')
print(bill.say_hello())
print(bill.age)

jill = Human('Jill', 20)
print(jill.say_hello())
print(jill.age)

# Виведення:
# Hello! I am Bill
# 0
# Hello! I am Jill
# 20

""" В цьому прикладі ми створили клас Human, у якому визначили метод __init__. У цьому методі ми додаємо об'єктам цього 
класу поля name та age. Зверніть увагу, що метод __init__ може приймати аргументи позиційні та/або іменні, як і будь-який 
інший метод. Коли ми створюємо об'єкт класу Human, ми повинні класу передати обов'язково хоча б один аргумент, оскільки 
метод __init__ повинен приймати обов'язково name.

Магічний метод __init__ не обов'язково повинен приймати аргументи та містити лише створення полів. Цей метод можна 
використовувати для реалізації будь-яких дій, які вам потрібні на етапі, коли об'єкт вже створений та його потрібно 
ініціалізувати.

Додамо перевірку віку, щоб встановити, чи є людина повнолітньою, і відповідне поле is_adult, а також використаємо 
метод __init__ для виклику іншого методу класу під час ініціалізації."""

class Human:
    def __init__(self, name: str, age: int = 0):
        self.name = name
        self.age = age
        # Виклик методу під час ініціалізації
        self.is_adult = self.__check_adulthood()  
        
        # Приклад логування
        print(f"Створено Human: {self.name}, Вік: {self.age}, Дорослий: {self.is_adult}")

    def say_hello(self) -> str:
        return f'Hello! I am {self.name}'

    def __check_adulthood(self) -> bool:
        return self.age >= 18

bill = Human('Bill')
print(bill.say_hello())
print(f"Вік: {bill.age}, Дорослий: {bill.is_adult}")

jill = Human('Jill', 20)
print(jill.say_hello())
print(f"Вік: {jill.age}, Дорослий: {jill.is_adult}")

# Виведення:
# Створено Human: Bill, Вік: 0, Дорослий: False
# Hello! I am Bill
# Вік: 0, Дорослий: False
# Створено Human: Jill, Вік: 20, Дорослий: True
# Hello! I am Jill
# Вік: 20, Дорослий: True

""" У цьому прикладі, коли створюється об'єкт класу Human, наш магічний метод __init__ виконує наступні дії. Він, як 
і було до цього, ініціалізує поля name та age. Але тепер він визначає, чи є особа дорослою, використовуючи метод 
check_adulthood, і зберігає результат в поле is_adult. Також ми додали рядок який виводить інформацію про створення 
об'єкта.

Отже метод __init__ може використовуватись не лише для простої ініціалізації полів, але й для виконання будь-яких 
інших додаткових операцій, необхідних для підготовки об'єкта до використання.                        
"""